// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame
{

using global::Unity.Collections;
using global::System;
using global::System.Collections.Generic;
using global::Fivemid.FiveFlat;

public struct InParentNamespace : IFlatBufferObject
{
  private Table __p;
  public ref ByteBuffer ByteBuffer { get { return ref __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FIVE_FLAT_23_12_04(); }
  public static InParentNamespace GetRootAsInParentNamespace(ref ByteBuffer _bb) { return GetRootAsInParentNamespace(ref _bb, new InParentNamespace()); }
  public static InParentNamespace GetRootAsInParentNamespace(ref ByteBuffer _bb, InParentNamespace obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, ref _bb)); }
  public void __init(int _i, ref ByteBuffer _bb) { __p = new Table(_i, ref _bb); }
  public InParentNamespace __assign(int _i, ref ByteBuffer _bb) { __init(_i, ref _bb); return this; }


  public static void StartInParentNamespace(ref FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<MyGame.InParentNamespace> EndInParentNamespace(ref FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyGame.InParentNamespace>(o);
  }
  public InParentNamespaceT UnPack() {
    var _o = new InParentNamespaceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InParentNamespaceT _o) {
  }
  public static Offset<MyGame.InParentNamespace> Pack(ref FlatBufferBuilder builder, InParentNamespaceT _o) {
    if (_o == null) return default(Offset<MyGame.InParentNamespace>);
    StartInParentNamespace(ref builder);
    return EndInParentNamespace(ref builder);
  }
}

public class InParentNamespaceT
{

  public InParentNamespaceT() {
  }
}


static public class InParentNamespaceVerify
{
  static public bool Verify(Fivemid.FiveFlat.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
